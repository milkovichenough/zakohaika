import requests
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from data.settings import ADMINS
from keyboards.inline import get_inline_answer, MessageInfo
from states.states import Form

router = Router()


@router.message(F.text == "–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ü–µ ü§≠")
async def start_quest(message: Message, state: FSMContext):
    await state.set_state(Form.title)
    await message.answer(f"–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ü—è:")


@router.message(Form.title)
async def form_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(Form.description)
    await message.answer(f"–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å:")


@router.message(Form.description)
async def form_title(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(Form.photo)
    await message.answer(f"–î–∞–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ:")


@router.message(Form.photo)
async def form_title(message: Message, state: FSMContext):
    url_text = message.text
    await state.update_data(url_text=url_text)
    # photo_file_id = message.photo[-1].file_id
    data = await state.get_data()
    formatted_text = []
    [
        formatted_text.append(f"{value}")
        for key, value in data.items()
    ]

    await message.answer(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. –û—á—ñ–∫—É–π—Ç–µ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–∞'—è–∑–∫—É. –í–∞—à–∞ –∑–∞—è–≤–∫–∞:")
    await message.answer(f"–ù–∞–∑–≤–∞: {data.get('title')}\n\n–û–ø–∏—Å: {data.get('description')}\nUrl —Ñ–æ—Ç–æ: {url_text}")

    for admin in ADMINS:
        await message.answer("–ù–∞–¥—ñ–π—à–ª–∞ –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞.")
        await message.answer(f"–ù–∞–∑–≤–∞: {data.get('title')}\n\n–û–ø–∏—Å: {data.get('description')}\nUrl —Ñ–æ—Ç–æ: {url_text}",
                             reply_markup=get_inline_answer(message.chat.id))


@router.callback_query(MessageInfo.filter())
async def answer(call: CallbackQuery, callback_data: MessageInfo, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    await call.message.delete()
    id_account = callback_data.id_account
    flag = callback_data.flag
    if flag:

        url = "https://8bf5-88-154-62-42.ngrok-free.app/places"
        data = {
            "description": f"{data.get('description')}",
            "title": f"{data.get('title')}",
            "photoUrl": f"{data.get('url_text')}"
        }
        response = requests.post(url, json=data)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if response.status_code == 200 or response.status_code == 201:
            print("–£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ POST-–∑–∞–ø–∏—Ç")
            await call.message.answer(f"–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!")
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ POST-–∑–∞–ø–∏—Ç—É. –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}")
            await call.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏")
    else:
        await call.message.answer(f"–í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞—è–≤–∫—É.")
